version: 0.0.2
jobId: "720"
jobName: DP Weather Data Prediction - python
jobType: Source Aligned Data Product
alias: State_Management
discoveryPort:
  name: DP Weather Data Prediction - python
inputPorts:
  - alias: Weather_Daily_1
    description: Weather Daily
    tags: []
    extra: {}
    syncType: pull
    type: s3-csv
    dataSetUrn: urn:dv:dataset:218e32e9-aa80-459d-8308-d78af89421b6
    filter: ""
    projection: []
    persistDataFrame: false
    entity:
      advanceOptions:
        mergeSchema: false
productState:
  persistDataFrame: false
  enableDataReconciliation: false
  enforceSchema: false
  stepName: State Management
  connection: MSIL_Redshift_Connection
  query: select * from weather_lr_test
  endPoint: s3.ap-south-1.amazonaws.com
  temporaryPathS3: s3://dlp-platform-engine-bucket/data/weather_lr
  type: readRedshiftTableByQuery
  isStateManagement: true
  sequence: 3
  alias: State_Management
  refreshInterval: 0 12 * * *
  retentionVersions: ""
  logicalSchema:
    properties:
      Actual:
        type: STRING
        description: ""
      Predicted:
        type: STRING
        description: ""
  enforceSchemaMethod: ""
  isProfilingEnabled: false
transformation:
  - alias: EMR_PySpark_1
    arguments:
      - s3://dlp-platform-engine-bucket/weather_data/##process_date##.csv
    pythonFilePath: s3://dlp-platform-engine-bucket/custom-job/script/ParquetToRedshift.py
    optional:
      pythonEnvTarGZPath: s3://dlp-platform-engine-bucket/custom-job/python-env/pyspark_venv_all.tar.gz
    type: customPySparkEMRServerless
    sequence: 2
    references:
      - alias: Weather_Daily_1
        sqlReference: ""
controlPort:
  dataQualityRules: {}
outputPort:
  subscriptionChannels:
    - channelType: Postgres
      queryType: SQL
