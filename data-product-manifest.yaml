version: 0.0.18
jobId: "123"
jobName: Weather Logistic Regression DP
jobType: Source Aligned Data Product
alias: Write_to_redshift2
discoveryPort:
  name: Weather Logistic Regression DP
inputPorts:
  - alias: weather_day_1
    description: weather day
    tags: []
    extra: {}
    syncType: pull
    type: s3-csv
    dataSetUrn: urn:dv:dataset:3a0494b4-86e9-430f-afcb-877a0d9bea95
    filter: ""
    projection: []
    persistDataFrame: false
    entity:
      advanceOptions:
        mergeSchema: false
productState:
  printSchema: true
  persistDataFrame: false
  enableDataReconciliation: false
  enforceSchema: false
  stepName: Write to redshift2
  connection: redshift
  query: select * from weather_lr
  endPoint: s3.us-east-1.amazonaws.com
  temporaryPathS3: s3://byte-etl-externaldemo/pyspark_serverless_test/temp/weather_lr
  type: readRedshiftTableByQuery
  isStateManagement: true
  sequence: 3
  alias: Write_to_redshift2
  refreshInterval: 0 12 * * *
  retentionVersions: ""
  logicalSchema:
    properties:
      Actual:
        type: STRING
        description: ""
      Predicted:
        type: STRING
        description: ""
  enforceSchemaMethod: ""
  isProfilingEnabled: false
transformation:
  - alias: EMR_PySpark_1
    arguments:
      - s3://byte-etl-externaldemo/weather_data/20230626103841.csv
    pythonFilePath: s3://bp-spark-sql-library-test-acc/custom-jobs/CustomPythonJobWriteParquet.py
    optional:
      pythonEnvTarGZPath: s3://byte-etl-externaldemo/pyspark_serverless_test/pyspark_venv.tar.gz
    type: customPySparkEMRServerless
    sequence: 2
    references:
      - alias: weather_day_1
        sqlReference: weather
      - alias: PMS_Transactions_1
        sqlReference: pms_transactions
      - alias: PMS_Master_1
        sqlReference: pms_master
controlPort:
  dataQualityRules: {}
outputPort:
  subscriptionChannels:
    - channelType: Postgres
      queryType: SQL
